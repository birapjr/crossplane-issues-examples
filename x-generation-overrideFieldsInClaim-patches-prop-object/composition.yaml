## WARNING: This file was autogenerated!
## Manual modifications will be overwritten
## unless ignore: true is set in generate.yaml!
## Last Modification: 19:10:13 on 07-11-2024.

apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  labels:
    cloud/provider: example
  name: compositedbinstance.rds.aws.example
spec:
  compositeTypeRef:
    apiVersion: rds.aws.example/v1alpha1
    kind: CompositeDBInstance
  mode: Pipeline
  pipeline:
  - functionRef:
      name: function-patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources
      patchSets:
      - name: Name
        patches:
        - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          type: FromCompositeFieldPath
      - name: External-Name
        patches:
        - fromFieldPath: metadata.annotations[crossplane.io/external-name]
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          type: FromCompositeFieldPath
      - name: Common
        patches:
        - fromFieldPath: metadata.labels['crossplane.io/claim-name']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['crossplane.io/claim-name']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['crossplane.io/claim-namespace']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['crossplane.io/claim-namespace']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['crossplane.io/composite']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['crossplane.io/composite']
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels['external-name']
          policy:
            fromFieldPath: Optional
          toFieldPath: metadata.labels['external-name']
          type: FromCompositeFieldPath
      - name: Parameters
        patches:
        - fromFieldPath: spec.deletionPolicy
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.deletionPolicy
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.allocatedStorage
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.allocatedStorage
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.allowMajorVersionUpgrade
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.allowMajorVersionUpgrade
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.applyImmediately
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.applyImmediately
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.autoGeneratePassword
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.autoGeneratePassword
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.autoMinorVersionUpgrade
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.autoMinorVersionUpgrade
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.availabilityZone
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.availabilityZone
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.backupRetentionPeriod
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.backupRetentionPeriod
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.backupTarget
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.backupTarget
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.backupWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.backupWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.blueGreenUpdate
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.blueGreenUpdate
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.caCertIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.caCertIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.characterSetName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.characterSetName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.copyTagsToSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.copyTagsToSnapshot
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.customIamInstanceProfile
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.customIamInstanceProfile
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.customerOwnedIpEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.customerOwnedIpEnabled
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dbSubnetGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dbSubnetGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.dedicatedLogVolume
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.dedicatedLogVolume
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.deleteAutomatedBackups
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.deleteAutomatedBackups
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.deletionProtection
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.deletionProtection
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.domain
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.domain
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.domainAuthSecretArn
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.domainAuthSecretArn
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.domainDnsIps
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.domainDnsIps
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.domainFqdn
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.domainFqdn
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.domainIamRoleName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.domainIamRoleName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.domainOu
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.domainOu
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.enabledCloudwatchLogsExports
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.enabledCloudwatchLogsExports
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.engine
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.engine
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.engineVersion
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.engineVersion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.finalSnapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.finalSnapshotIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.iamDatabaseAuthenticationEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.iamDatabaseAuthenticationEnabled
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.identifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.identifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.identifierPrefix
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.identifierPrefix
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.instanceClass
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.instanceClass
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.iops
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.iops
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.kmsKeyIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.kmsKeyIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.licenseModel
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.licenseModel
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.maintenanceWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.maintenanceWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.manageMasterUserPassword
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.manageMasterUserPassword
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserPasswordSecretRef.key
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserPasswordSecretRef.key
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserPasswordSecretRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserPasswordSecretRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserPasswordSecretRef.namespace
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserPasswordSecretRef.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.masterUserSecretKmsKeyIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.maxAllocatedStorage
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.maxAllocatedStorage
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.monitoringInterval
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.monitoringInterval
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.monitoringRoleArn
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.monitoringRoleArn
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.monitoringRoleArnRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.monitoringRoleArnRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.monitoringRoleArnRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.monitoringRoleArnRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.monitoringRoleArnRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.monitoringRoleArnRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.monitoringRoleArnSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.monitoringRoleArnSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.monitoringRoleArnSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.monitoringRoleArnSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.monitoringRoleArnSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.monitoringRoleArnSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.monitoringRoleArnSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.monitoringRoleArnSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.multiAz
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.multiAz
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.ncharCharacterSetName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.ncharCharacterSetName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.networkType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.networkType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.optionGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.optionGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.parameterGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.parameterGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.parameterGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.parameterGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.parameterGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.parameterGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.parameterGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.parameterGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.parameterGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.parameterGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.parameterGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.parameterGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.parameterGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.parameterGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.parameterGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.parameterGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.performanceInsightsEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.performanceInsightsEnabled
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.performanceInsightsKmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.performanceInsightsKmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.performanceInsightsRetentionPeriod
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.performanceInsightsRetentionPeriod
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.port
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.port
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.publiclyAccessible
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.publiclyAccessible
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.region
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.region
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicaMode
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicaMode
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicateSourceDb
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicateSourceDb
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicateSourceDbRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicateSourceDbRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicateSourceDbRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicateSourceDbRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicateSourceDbRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicateSourceDbRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicateSourceDbSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicateSourceDbSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicateSourceDbSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicateSourceDbSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicateSourceDbSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicateSourceDbSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.replicateSourceDbSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.replicateSourceDbSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.restoreToPointInTime
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.restoreToPointInTime
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.s3Import
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.s3Import
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.skipFinalSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.skipFinalSnapshot
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.snapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.snapshotIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.storageEncrypted
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.storageEncrypted
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.storageThroughput
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.storageThroughput
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.storageType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.storageType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.timezone
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.timezone
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.username
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.username
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdRefs
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdRefs
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.forProvider.vpcSecurityGroupIds
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.forProvider.vpcSecurityGroupIds
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.allocatedStorage
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.allocatedStorage
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.allowMajorVersionUpgrade
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.allowMajorVersionUpgrade
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.applyImmediately
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.applyImmediately
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.autoMinorVersionUpgrade
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.autoMinorVersionUpgrade
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.availabilityZone
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.availabilityZone
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.backupRetentionPeriod
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.backupRetentionPeriod
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.backupTarget
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.backupTarget
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.backupWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.backupWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.blueGreenUpdate
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.blueGreenUpdate
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.caCertIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.caCertIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.characterSetName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.characterSetName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.copyTagsToSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.copyTagsToSnapshot
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.customIamInstanceProfile
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.customIamInstanceProfile
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.customerOwnedIpEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.customerOwnedIpEnabled
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dbSubnetGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dbSubnetGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.dedicatedLogVolume
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.dedicatedLogVolume
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.deleteAutomatedBackups
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.deleteAutomatedBackups
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.deletionProtection
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.deletionProtection
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.domain
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.domain
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.domainAuthSecretArn
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.domainAuthSecretArn
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.domainDnsIps
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.domainDnsIps
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.domainFqdn
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.domainFqdn
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.domainIamRoleName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.domainIamRoleName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.domainOu
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.domainOu
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.enabledCloudwatchLogsExports
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.enabledCloudwatchLogsExports
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.engine
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.engine
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.engineVersion
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.engineVersion
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.finalSnapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.finalSnapshotIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.iamDatabaseAuthenticationEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.iamDatabaseAuthenticationEnabled
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.identifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.identifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.identifierPrefix
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.identifierPrefix
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.instanceClass
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.instanceClass
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.iops
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.iops
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.kmsKeyIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.kmsKeyIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.licenseModel
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.licenseModel
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.maintenanceWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.maintenanceWindow
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.manageMasterUserPassword
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.manageMasterUserPassword
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.masterUserSecretKmsKeyIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.maxAllocatedStorage
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.maxAllocatedStorage
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.monitoringInterval
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.monitoringInterval
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.monitoringRoleArn
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.monitoringRoleArn
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.monitoringRoleArnRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.monitoringRoleArnRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.monitoringRoleArnRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.monitoringRoleArnRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.monitoringRoleArnRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.monitoringRoleArnRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.monitoringRoleArnSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.monitoringRoleArnSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.monitoringRoleArnSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.monitoringRoleArnSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.monitoringRoleArnSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.monitoringRoleArnSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.monitoringRoleArnSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.monitoringRoleArnSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.multiAz
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.multiAz
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.ncharCharacterSetName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.ncharCharacterSetName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.networkType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.networkType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.optionGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.optionGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.parameterGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.parameterGroupName
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.parameterGroupNameRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.parameterGroupNameRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.parameterGroupNameRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.parameterGroupNameRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.parameterGroupNameRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.parameterGroupNameRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.parameterGroupNameSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.parameterGroupNameSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.parameterGroupNameSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.parameterGroupNameSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.parameterGroupNameSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.parameterGroupNameSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.parameterGroupNameSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.parameterGroupNameSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.passwordSecretRef.key
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.passwordSecretRef.key
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.passwordSecretRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.passwordSecretRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.passwordSecretRef.namespace
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.passwordSecretRef.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.performanceInsightsEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.performanceInsightsEnabled
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.performanceInsightsKmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.performanceInsightsKmsKeyId
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.performanceInsightsRetentionPeriod
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.performanceInsightsRetentionPeriod
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.port
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.port
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.publiclyAccessible
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.publiclyAccessible
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicaMode
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicaMode
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicateSourceDb
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicateSourceDb
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicateSourceDbRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicateSourceDbRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicateSourceDbRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicateSourceDbRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicateSourceDbRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicateSourceDbRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicateSourceDbSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicateSourceDbSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicateSourceDbSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicateSourceDbSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicateSourceDbSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicateSourceDbSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.replicateSourceDbSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.replicateSourceDbSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.restoreToPointInTime
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.restoreToPointInTime
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.s3Import
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.s3Import
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.skipFinalSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.skipFinalSnapshot
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.snapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.snapshotIdentifier
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.storageEncrypted
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.storageEncrypted
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.storageThroughput
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.storageThroughput
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.storageType
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.storageType
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.tags
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.tags
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.timezone
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.timezone
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.username
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.username
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdRefs
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdRefs
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.matchControllerRef
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.matchControllerRef
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.matchLabels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.matchLabels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIdSelector.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.initProvider.vpcSecurityGroupIds
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.initProvider.vpcSecurityGroupIds
          type: FromCompositeFieldPath
        - fromFieldPath: spec.managementPolicies
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.managementPolicies
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.providerConfigRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.providerConfigRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.providerConfigRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.providerConfigRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.configRef.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.configRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolution
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.configRef.policy.resolve
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.metadata.annotations
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.metadata.labels
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.metadata.labels
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.metadata.type
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.metadata.type
          type: FromCompositeFieldPath
        - fromFieldPath: spec.publishConnectionDetailsTo.name
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.publishConnectionDetailsTo.name
          type: FromCompositeFieldPath
      - name: Status
        patches:
        - fromFieldPath: status.atProvider.address
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.address
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.allocatedStorage
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.allocatedStorage
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.allowMajorVersionUpgrade
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.allowMajorVersionUpgrade
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.applyImmediately
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.applyImmediately
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.arn
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.arn
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.autoMinorVersionUpgrade
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.autoMinorVersionUpgrade
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.availabilityZone
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.availabilityZone
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.backupRetentionPeriod
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.backupRetentionPeriod
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.backupTarget
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.backupTarget
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.backupWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.backupWindow
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.blueGreenUpdate
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.blueGreenUpdate
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.caCertIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.caCertIdentifier
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.characterSetName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.characterSetName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.copyTagsToSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.copyTagsToSnapshot
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.customIamInstanceProfile
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.customIamInstanceProfile
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.customerOwnedIpEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.customerOwnedIpEnabled
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.dbName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.dbName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.dbSubnetGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.dbSubnetGroupName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.dedicatedLogVolume
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.dedicatedLogVolume
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.deleteAutomatedBackups
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.deleteAutomatedBackups
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.deletionProtection
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.deletionProtection
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.domain
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.domain
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.domainAuthSecretArn
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.domainAuthSecretArn
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.domainDnsIps
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.domainDnsIps
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.domainFqdn
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.domainFqdn
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.domainIamRoleName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.domainIamRoleName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.domainOu
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.domainOu
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.enabledCloudwatchLogsExports
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.enabledCloudwatchLogsExports
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.endpoint
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.endpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.engine
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.engine
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.engineVersion
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.engineVersion
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.engineVersionActual
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.engineVersionActual
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.finalSnapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.finalSnapshotIdentifier
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.hostedZoneId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.hostedZoneId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.iamDatabaseAuthenticationEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.iamDatabaseAuthenticationEnabled
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.id
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.id
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.identifier
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.identifier
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.identifierPrefix
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.identifierPrefix
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.instanceClass
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.instanceClass
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.iops
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.iops
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.kmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.kmsKeyId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.latestRestorableTime
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.latestRestorableTime
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.licenseModel
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.licenseModel
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.listenerEndpoint
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.listenerEndpoint
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.maintenanceWindow
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.maintenanceWindow
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.manageMasterUserPassword
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.manageMasterUserPassword
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.masterUserSecret
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.masterUserSecret
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.masterUserSecretKmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.masterUserSecretKmsKeyId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.maxAllocatedStorage
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.maxAllocatedStorage
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.monitoringInterval
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.monitoringInterval
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.monitoringRoleArn
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.monitoringRoleArn
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.multiAz
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.multiAz
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.ncharCharacterSetName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.ncharCharacterSetName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.networkType
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.networkType
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.optionGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.optionGroupName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.parameterGroupName
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.parameterGroupName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.performanceInsightsEnabled
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.performanceInsightsEnabled
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.performanceInsightsKmsKeyId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.performanceInsightsKmsKeyId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.performanceInsightsRetentionPeriod
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.performanceInsightsRetentionPeriod
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.port
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.port
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.publiclyAccessible
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.publiclyAccessible
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.replicaMode
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.replicaMode
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.replicas
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.replicas
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.replicateSourceDb
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.replicateSourceDb
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.resourceId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.resourceId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.restoreToPointInTime
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.restoreToPointInTime
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.s3Import
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.s3Import
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.skipFinalSnapshot
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.skipFinalSnapshot
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.snapshotIdentifier
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.snapshotIdentifier
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.status
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.status
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.storageEncrypted
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.storageEncrypted
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.storageThroughput
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.storageThroughput
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.storageType
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.storageType
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.tags
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.tags
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.tagsAll
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.tagsAll
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.timezone
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.timezone
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.username
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.username
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.vpcSecurityGroupIds
          policy:
            fromFieldPath: Optional
          toFieldPath: status.atProvider.vpcSecurityGroupIds
          type: ToCompositeFieldPath
        - fromFieldPath: status.observedGeneration
          policy:
            fromFieldPath: Optional
          toFieldPath: status.observedGeneration
          type: ToCompositeFieldPath
      resources:
      - base:
          apiVersion: rds.aws.upbound.io/v1beta2
          kind: Instance
          metadata: {}
          spec:
            providerConfigRef:
              name: default
            writeConnectionSecretToRef:
              namespace: crossplane-system
        connectionDetails:
        - fromConnectionSecretKey: username
          name: username
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: password
          name: password
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: endpoint
          name: endpoint
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: port
          name: port
          type: FromConnectionSecretKey
        name: Instance
        patches:
        - patchSetName: Name
          type: PatchSet
        - patchSetName: External-Name
          type: PatchSet
        - patchSetName: Common
          type: PatchSet
        - patchSetName: Parameters
          type: PatchSet
        - patchSetName: Status
          type: PatchSet
        - fromFieldPath: metadata.annotations["crossplane.io/external-name"]
          policy:
            fromFieldPath: Optional
          toFieldPath: status.uid
          type: ToCompositeFieldPath
        - fromFieldPath: status.conditions
          policy:
            fromFieldPath: Optional
          toFieldPath: status.observed.conditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.uid
          policy:
            fromFieldPath: Optional
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
          - string:
              fmt: '%s-secret'
              type: Format
            type: string
          type: FromCompositeFieldPath
    step: patch-and-transform
  - functionRef:
      name: function-add-labels
    input:
      annotations:
        ignore: true
      apiVersion: labels.fn.crossplane.io/v1beta1
      kind: Input
      labels:
        exclude:
        - helm.*
        - kustomize.*
        - crossplane.*
    step: labels
  - functionRef:
      name: function-add-tags
    input:
      apiVersion: tags.fn.crossplane.io/v1beta1
      ignoreTags:
      - ^kustomize.*
      - ^crossplane.*
      kind: Input
      tags:
      - path: spec.forProvider.tags
        type: tagObject
      tagsFrom: metadata.labels
    step: tag
  - functionRef:
      name: function-auto-ready
    step: automatically-detect-readiness
  writeConnectionSecretsToNamespace: crossplane-system
